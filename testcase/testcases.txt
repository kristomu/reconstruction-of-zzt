CONVEYOR.BRD	Example of conveyor stat overwriting bug

NOSTAT.ZZT	A bunch of items without stats, to test behavior when GetStatId
		fails. Also, a transport next to the transport without stats
		(exercises another bug if you enter it from below), and a
		centipede (for fuzz testing purposes).

OVERFLOW.ZZT	A world with a title board that exceeds the 20k hard limit. May
		cause a crash or arbitrary behavior.

LTITLE.ZZT	A very long title makes editing annoying. Can possibly be used
		to read outside of allocated memory in certain cases (not shown
		here.)

LOCKED.ZZT	A Super Lock locked world with the last board corrupted by Super
		Lock. Use it to test if the last board can be recovered.

CHURN.ZZT	Allocates and deallocates lots of memory (2 MB) from repeatedly
		entering the board it exited. Crashes DOS ZZT with a heap 
		overflow.

INFLATE.ZZT	Tests the adding of stats to an almost-full (almost 20K)
		board. Allowing the stats to be added can cause a crash in
		BoardClose as the serialized representation overflows the
		buffer.

LEAK.ZZT	Demonstrates a memory leak in unpatched ZZT: AddStat checks
		whether a stat has data by using Data <> 0, but DataLen can
		still be zero with Data <> 0.

BRDSKIP.ZZT	ZZT world containing a board of size greater than 32k, showing
		the need to consider BoardLen unsigned. (DOS ZZT does the right
		thing here.)

MISALLOC.ZZT	Shows that #walk then #die then THUD can lead to a read-after-
		free if the object that dies is the last object in the list.
		Run the fuzzer using your memory bug detector of choice (e.g.
		Valgrind).

MONIBOMB.ZZT	Causes a hang (in DOS ZZT) or an invariant violation by
		overwriting the Monitor with a #put.

EDREAD1.ZZT	Gets ZZT to read from unallocated memory when getting board
		titles in the editor. Probably does nothing in DOS; causes
		Valgrind to complain on Linux.

ODDTEXT.ZZT	Board containing text with a bright/blink background. Touching
		this should crash or hang DOS ZZT.

EDLEAK1.ZZT	Shows that altering a bound object's data can cause out-of-bound
		reads. Needs to be manually invoked - see the world itself for
		more info.

EDLEAK2.ZZT	Automated version of the previous test case: triggers valgrind
		errors with FreePascal fuzzt.

WRAPPED.ZZT	A board with a tile with element 0xFF. Triggers a crash in C++
		ZZT when element_t is defined as a signed char.

LOAD.ZZT	Triggers a "jump on undefined value" error in valgrind with C++
		fuzzt as loading the board length from file fails. Also causes
		a memory leak when dumping a board.

SLOW.ZZT	Slows down C++ ZZT by generating lots of objects with stats.
		Each AddStat call leads to a serialization check which takes
		a lot of time.

ENDGAME.ZZT	Fuzz mode key exhaustion crash by continuously duplicating
		player clones onto passages while the player has health 0.
		This exhausts fuzz mode's Escape keypresses because escape
		only gets it out of #endgame mode. Fixed by trying to quit
		with both Escape and Q.

HSLIME.ZZT	Creates an out of bounds access by placing a slime on (0,2).
		This slime is placed by stats stacking: the player has an Under
		property setting the tile to a slime, and then when the player
		moves off, the second stat picks up the slack and animates the
		slime.

GHOSTCHK.ZZT	Keeps ZZT-OOP code running while destroying the object that
		was running it, thus causing a range check error on a #PUT.
		Detailed explanation in file.

MEMCPY.ZZT	Causes an ASAN error on C++ linux-reconstruction due to
		memcpy on overlapping memory ranges when array.h uses memcpy
		where it should be using memmove.

INVADIR.ZZT	Out of bounds /direction command by using stale X,Y coordinates
		as the source direction.

crash/		Worlds and boards that produce crashes
hang/		Worlds and boards that produce hangs/hard lockups

delayed crash/	Worlds that produce crashes after doing something (usually going
		to the right)
editor crash/	Worlds that induce crashes in the editor
editor read/	Worlds that induce reads from or writes to unallocated memory,
		in the editor.

regressions/	Bugs that appeared due to an incorrect change of code.
